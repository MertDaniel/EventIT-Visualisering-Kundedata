import pandas as pd
import plotly.express as px
from dash import Dash, dcc, html, Input, Output

# 1) Indl√¶s CSV
df = pd.read_csv(
    'Gebyr oms√¶tning og deltager opg√∏relse pr √•r Daniel (1).csv',
    header=2,
    sep=';',
    parse_dates=['Periode start'],
    dayfirst=False
)

# 2) Rens og konvert√©r
df['Vores gebyr'] = pd.to_numeric(df['Vores gebyr'], errors='coerce')
df = df.dropna(subset=['Periode start', 'Vores gebyr'])
df['√Ör'] = df['Periode start'].dt.year

# 3) √Örsvalg
√•r_valg = sorted(df['√Ör'].unique())
√•r_min, √•r_max = int(min(√•r_valg)), int(max(√•r_valg))

# 4) Top 25 arrang√∏rer (samlet set)
top_kunder = (
    df.groupby('Arrang√∏r')['Vores gebyr']
      .sum()
      .sort_values(ascending=False)
      .head(25)
      .index
)
df_top25 = df[df['Arrang√∏r'].isin(top_kunder)]

# 5) Dash-app setup
app = Dash(__name__)
app.title = "Gebyrvisualisering"

app.layout = html.Div([
    html.H1("Gebyr pr. √•r", style={'textAlign': 'center'}),

    # S√∏g + slider
    html.Div([
        html.Label("üîç S√∏g efter arrang√∏r:"),
        dcc.Input(id='s√∏gefelt', type='text', placeholder='fx Lystrup', style={'width': '300px'}),
    ], style={'padding': '10px'}),

    html.Div([
        html.Label("üìÖ Vis op til √•r:"),
        dcc.Slider(
            id='√•r-slider',
            min=√•r_min,
            max=√•r_max,
            step=1,
            value=√•r_max,
            marks={int(y): str(y) for y in √•r_valg},
            tooltip={"placement": "bottom", "always_visible": True}
        )
    ], style={'padding': '10px'}),

    html.H2("Udvikling for valgt arrang√∏r"),
    dcc.Graph(id='gebyr-graf'),

    # Dropdown til top 25
    html.H2("V√¶lg top 25 arrang√∏rer"),
    dcc.Dropdown(
        id='top25-selector',
        options=[{'label': a, 'value': a} for a in top_kunder],
        value=list(top_kunder[:5]),   # vis de 5 st√∏rste som default
        multi=True,
        placeholder="V√¶lg √©n eller flere arrang√∏rer‚Ä¶",
        style={'width': '80%', 'margin-bottom': '20px'}
    ),

    html.H2("üìä Udvikling for valgte top 25 arrang√∏rer"),
    dcc.Graph(id='top25-graf')
])

# 6a) Callback til den s√∏gte arrang√∏r
@app.callback(
    Output('gebyr-graf', 'figure'),
    Input('s√∏gefelt', 'value'),
    Input('√•r-slider', 'value')
)
def opdater_graf(s√∏gning, maks_√•r):
    s√∏gning = s√∏gning or ""
    filtreret = df[
        df['Arrang√∏r'].str.contains(s√∏gning, case=False, na=False) &
        (df['√Ör'] <= maks_√•r)
    ]
    if filtreret.empty:
        return {
            "data": [],
            "layout": {"title": "Ingen data fundet for dette filter", "height": 400}
        }
    df2 = filtreret.groupby('√Ör')['Vores gebyr'].sum().reset_index()
    fig = px.line(
        df2, x='√Ör', y='Vores gebyr', markers=True,
        title=f"Vores gebyr pr. √•r (op til {maks_√•r}) ‚Äì filtreret p√•: '{s√∏gning}'",
        labels={'Vores gebyr': 'Vores gebyr (DKK)', '√Ör': '√Ör'}
    )
    fig.update_layout(hovermode='x unified', height=500)
    return fig

# 6b) Callback til top 25-graf
@app.callback(
    Output('top25-graf', 'figure'),
    Input('top25-selector', 'value')
)
def opdater_top25(valgte):
    if not valgte:
        return {
            "data": [],
            "layout": {"title": "V√¶lg mindst √©n arrang√∏r ovenfor!", "height": 400}
        }
    dff = df_top25[df_top25['Arrang√∏r'].isin(valgte)]
    df_plot = (
        dff.groupby(['√Ör','Arrang√∏r'])['Vores gebyr']
           .sum()
           .reset_index()
    )
    fig = px.line(
        df_plot,
        x='√Ör',
        y='Vores gebyr',
        color='Arrang√∏r',
        markers=True,
        title="Udvikling i 'Vores gebyr' for valgte arrang√∏rer",
        labels={'Vores gebyr': 'Vores gebyr (DKK)', '√Ör': '√Ör'}
    )
    fig.update_layout(hovermode='x unified', height=600)
    return fig

# 7) K√∏r server
if __name__ == '__main__':
    app.run(debug=True)
